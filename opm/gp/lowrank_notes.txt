def lowrank_leftdiv(x, D, G, blocksize=1000):

    N, q = G.shape

    
    if x.shape[1] <= blocksize:
        y = np.linalg.solve(D, x)
        y = G.T @ y
    
    
    """else:
        print('1')
        y = np.zeros(x.shape)
        y2 = np.zeros(G.T.shape)
        numblocks = int(np.ceil(x.shape[1] / blocksize))
        for k in range(1, numblocks + 1):
            index = np.arange((k-1) * blocksize + 1, np.minimum(k * blocksize, x.shape[1])+1)
            index -= 1
            y[:,index] = np.linalg.solve(D, x[:,index])
            y2[:,index] = G.T @ y[:,index]
        y = y2
    """
    

    if G.shape[1] <= blocksize:
        innerblock= np.linalg.solve(D, G)
        innerblock = np.eye(q) + G.T @ innerblock

    
    """else:
        print('2')
        numblocks = int(np.ceil(G.shape[1] / blocksize))
        innerblock = np.zeros(G.shape)
        for k in range(1, numblocks + 1):
            index = np.arange((k-1) * blocksize + 1, np.minimum(k * blocksize, G.shape[1])+1)
            index -= 1
            innerblock[:,index] = np.linalg.solve(D, G[:,index])

        innerblock = np.eye(q) + G.T @ innerblock"""

                                           
    if x.shape[1] <= blocksize:
        y = np.linalg.solve(innerblock, y)
        y = G @ y
        y = np.linalg.solve(D, x-y)
    
    """else:
        print('3')
        numblocks = int(np.ceil(x.shape[1] / blocksize))
        y2 = np.zeros(x.shape)
        for k in range(1, numblocks + 1):
            index = np.arange((k-1) * blocksize + 1, np.minimum(k * blocksize, x.shape[1])+1)
            index -= 1
            y2[:,index] = G @ np.linalg.solve(innerblock, y[:,index])
            y2[:,index] = np.linalg.solve(D, (x[:,index]-y2[:,index]))
        y=y2"""

    return y